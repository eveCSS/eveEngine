

EngineStatus:
enum engineStatusT:
	eveEngIDLENOXML=1: 	No XML is loaded, engine has just be started or
						all current chains have been done 
	eveEngIDLEXML: 		XML is loaded, but chains are not yet started
	eveEngLOADINGXML:	XML is currently loading
	eveEngEXECUTING: 	at least one chain is executing 
						(execution may be paused ??) 
	eveEngPAUSED:		Pause has been activated (Button) 
	eveEngSTOPPED:		Stop has been activated (Button)
	eveEngHALTED:		Halt has been activated (Button)

 * If START, PAUSE, HALT, STOP command is received, engine status 
   changes to STARTED, PAUSED, HALTED, STOPPED.
 * Engine status is set to EXECUTING or IDLE by the appropriate
   chainStatus Message.
 * Commands are accepted only, if engineStatus is EXECUTING or IDLE.
   Exception: HALT is always accepted.
-------------------------------------------------------

enum chainStatusT {
	eveChainSmIDLE=1		chain is not yet started, ready with init
	eveChainSmINITIALIZING:	scanmodule is initializing
							(usually before idle)
	eveChainSmEXECUTING:	scanmodule/chain is executing
	eveChainSmPAUSED:		scanmodule/chain is paused
	eveChainSmTRIGGERWAIT:	scanmodule is waiting for a trigger
	eveChainSmDONE:			scanmodul is ready
	eveChainDONE:			the chain and all scanmodules are done
	eveChainSTORAGEDONE		the corresponding storageModule is done
							if this has been signaled for all chains
							engine is done and new XML may be loaded.
							This will never be sent, if we have no storage!
---------------------------------------------------------
ScanModul Status:
	eveSmNOTSTARTED: only at the very beginning
					 no start signal received yet
	eveSmINITIALIZING: is initializing, smstatus does not use this
	eveSmEXECUTING:	 executing
	eveSmTRIGGERWAIT: waiting for Trigger
	eveSmPAUSED:	 paused
	eveSmDONE:		 ready
	eveSmAPPEND: 	dieser Scan ist fertig, aber appended läuft noch
 
ScanModul Stages:
	eveStgINIT:			
	eveStgGOTOSTART
	eveStgPRESCAN
	eveStgSETTLETIME
	eveStgTRIGREAD		hier fängt die Loop an
	eveStgNEXTPOS
	eveStgPOSTSCAN
	eveStgENDPOS
	eveStgFINISH

	eveStgREADPOS macht keinen Sinn, da im scanmodul nur die benutzten Motoren
	bekannt sind, aber alle definierten Motoren gelesen werden sollen. 
	Daher ReadPos/MotorInitial in ScanManagers start-Methode verschieben
	oder vom root-Scan eine ReadPos-Methode des Scan-Managers aufrufen.
	Dort evtl nochmal unterteilen in init (vor dem Start) und read 
	(erste Aktion nach Start).
 
 * all stage Methods
 * - have signals connected to their group actions, so they are called
 *   if the group received a done event by underlaying transport
 * - if called they check if their group action is finished
 *   and set currentStageReady and emit execStage.
 * - execStage decides which stage comes next.
 * - execStage is called by events and cannot be used to signal that a 
 	 stage/substage  is ready
 
======================

QObject Hierarchien:

ScanThread:
	- ScanManager (kein Object-Parent!)
		- ScanModule
			- SMAxis
				- CaTransport
					- BaseTransport

==========================

Events:
	- Beim Umschalten der Pausen ist das exakte Mitzählen von 
	  sigExecStage-Signalen aufgegeben. ScanModule muss nach jeder stage
	  selbst testen ob weitergegangen werden darf, nicht auf 
	  signalCounter verlassen 
	- können von GUI oder monitor kommen => Signal an ScanManager
	   ruft über den rootSM-Baum die xxxxSM-Methode mit id=0 auf
	- können von monitor direkt an SM kommen => Signal an ScanModule
	   ruft per Signal die entsprechende xxxxSM-Methode mit id!=0 auf
	
	start: 
	- beendet pause status, egal von wem gesetzt
	- starten eines nested scans im Zustand eveSmDone erfolgt durch 
	  Aufruf der startNestedSM-Methode vom Parent SM
	  
	 - Braucht man einen restart, wenn der Scan fertig ist?
	
	Wenn SMStatus == eveSmNOTSTARTED
		dann wird dieser Scan gestartet
	Wenn id==0
		dann wird die resumeSM-Methode aufgerufen, die den ganzen
		Baum durchsucht und alle nested Scans von Pause auf Exec setzt.
		Der Aufruf kann abgebrochen werden, sobald ein paused scan 
		gefunden wurde.
	
	resumeSM:
	- beendet pause, setzt status auf eveSmEXECUTING und schickt
	  sigExecStage. Das kann zu doppeltem sigExecStage-Signal führen,
	  wenn ein innerer Scan noch läuft.
	
	
	pause:
	- SMs können nur von executing nach pause wechseln 
	Wenn SMStatus == eveSmEXECUTING
		dann wird dieser Scan in den Status paused gesetzt
		dann wird die startSM-Methode aller nested scans aufgerufen.
		(da sie auch executing sein können), der Aufruf kann abgebrochen
		werden, sobald ein nested scan nicht executing ist.
	id == 0 && SMStatus != executing
		dann wird auch die pauseSM-Methode aller appended scans aufgerufen.

	halt:
	- gibt es nur als GUI-Befehl
	Wenn SMStatus != eveSmDONE
		Wenn SMStatus == eveSmPAUSED
			dann status auf eveSmEXECUTING setzen
		Wenn SMStatus == eveSmEXECUTING oder SMStatus == eveSmPAUSED
			dann prüfen ob stage == StgGotoStart oder StgNextPos
				=> MotorStop schicken
			dann status auf eveStgPOSTSCAN und currentStageReady=true setzen.

	stop:
		wie halt ohne Motor anhalten
	
	break:
	- falls von GUI ausgelöst, dann nur den innersten Scan anhalten,
	  d.h. erst die nested-break-Methode aufrufen, dann inneren Scan testen,
	  falls der ein break ausgelöst hat, dann kein break auslösen

	Wenn id == 0 && (SMStatus == eveSmEXECUTING oder SMStatus == eveSmPAUSED)
		dann prüfen ob nested-scan einen break ausgeführt hat, 
		wenn nicht dann status auf eveStgNextPos und currentStageReady=true setzen.
	Wenn id == 0 && !(SMStatus == eveSmEXECUTING oder SMStatus == eveSmPAUSED)
		dann appended scan breakSM aufrufen
	Wenn id != 0
		wenn (SMStatus == eveSmEXECUTING oder SMStatus == eveSmPAUSED)
		dann status auf eveStgNextPos und currentStageReady=true setzen.
	redo:
		redo-Flag im SM setzen

=================
noch mehr Events:
	
	Redo-Event Chain: = wie  Redo-Event SM in allen SMs
				ausgeführt über ein Signal an ScanMannager,
				der rekursiv alle redo-Slots der ScanModule
				aufruft mit einem chain-Marker.
	Redo-Event SM: redo-Slot des SM wird ohne chain-Marker aufgerufen
				setzt catchedRedo, muss von SM in der trigger-/read-Phase
				gelesen und zurückgesetzt werden.
				
	Break-Event Chain: wie Break-Event SM in allen SMs
				ausgeführt über ein Signal an ScanMannager,
				der rekursiv alle break-Slots der ScanModule
				aufruft mit einem chain-Marker.
				Angehalten wird nur der innerste gerade laufende Scan 
	Break-Event SM: falls im status exec, dann abbrechen
				Break kann auch während Pause gesendet werden und
				bricht dann den inneren Scan ab und macht weiter mit
				Pause
	
	Pause-Event Chain: es werden rekursiv alle pause Slots
				der SMs aufgerufen und alle SMs auf Pause gesetzt.
				Anders als bei Break, wird die Pause in allen SMs
				gesetzt und nicht nur im innersten Laufenden.
				So kann ein Break-Signal auch innerhalb einer Pause
				kommen, dass den innersten Scan dann sofort beendet 
				und im nächst höheren Scan wieder auf eine Pause
				stösst. 
				Nachteil: Eine Chain-Pause kann nicht durch eine
				SM-Pause aufgehoben werden.
	Pause-Event SM: Nur der aktuelle SM wird auf PAUSE gesetzt.
				Pausen werden nicht gespeichert, d.h. ein Pause-Event
				wird ignoriert, wenn das SM gerade nicht ausgeführt wird.

	Monitor-Events:
	Die SMs registrieren sich bei einem EventManager.
	Bei der Registrierung schicken die SMs oder der ScanManager eine Message
	an den EventManager.
	geben die SMs den auszulösenden Slot mit oder der Monitor-Manager
	schickt eine Monitor-Nachricht. Das ist noch nicht entschieden.
	Weiterhin parst das SM den XML-Text und gibt alle notwendigen Infos
	an den Monitor weiter. SM muss sich unbedingt auch wieder abmelden,
	sonst wird evtl. ein Slot aufgerufen, der schon nicht mehr existiert.
	Gefährlich!, besser mit Messages. 
	=> registrieren und event auslösen über messages
	Aber: Scan-Manager ruft Events auch über Signale auf, die
	unregistrieren sich auch vernünftig. Der Mechanismus sollte
	der gleiche für Event-Manager und Scan-Manager sein.
	Also: der scanManager registriert ein Event über eine eventRegisterMessage
		und gibt seine Adresse mit, damit sein Slot aufgerufen werden kann.
		Er vergibt eine eventId, die zusammen mit seiner ChannelId einduetig ist.
		Ein Event erzeugt beim registrieren ein actionObject z.B vom Typ Pause,
		dessen Signal mit dem entsprechenden scanManager::smPause -slot
		verbunden wird. Das Signal wird dann mit der entsprechenden
		event-ID aufgerufen.
	
	
	Der Scanmanager müsste dann entsprechend den Monitor für die
	gesamte Chain abonnieren.
	
	
	Event-Source: die Quelle des Events, z.B der Monitor, der einen
				Wert überschreitet.
	Event-Target: Das Eventziel, z.B. ein Detektor zu triggern, eine
				Chain zu starten etc.
				
	TODO:
	- Wie wird die Pause (bei Monitor-Event) wieder abgeschaltet
	


 